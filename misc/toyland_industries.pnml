/*

spriteset(oilwell_ground_overlay, "src/gfx/oil_wells/oil_wells.png") {
    tmpl_level_ground(7,9)
}

spritelayout oil_wells_tile_construction {
    ground { sprite: GROUNDSPRITE_CLEARED; }
}

GROUND_AWARE_SPRITELAYOUT(oil_wells_tile(sprite_offset))
    GROUND_SPRITE_OVERLAY(oilwell_ground_overlay)
    CONDITIONAL_BUILDING_SPRITE(2174 + sprite_offset, 32, 1)
SPRITELAYOUT_END

/* We use animation frames 1..10 for the continued animation as a loop
 * frames 11 .. 20 are the same animation frames, but animation will stop at frame 11
 * this is needed so the last cycle can be finished gracefully
 */ /*
switch (FEAT_INDUSTRYTILES, SELF, oil_wells_tile_animation, animation_frame) {
    2:  oil_wells_tile(1);
    3:  oil_wells_tile(2);
    4:  oil_wells_tile(3);
    5:  oil_wells_tile(4);
    6:  oil_wells_tile(5);
    7:  oil_wells_tile(4);
    8:  oil_wells_tile(3);
    9:  oil_wells_tile(2);
    10: oil_wells_tile(1);
    12: oil_wells_tile(1);
    13: oil_wells_tile(2);
    14: oil_wells_tile(3);
    15: oil_wells_tile(4);
    16: oil_wells_tile(5);
    17: oil_wells_tile(4);
    18: oil_wells_tile(3);
    19: oil_wells_tile(2);
    20: oil_wells_tile(1);
    oil_wells_tile(0);
}


switch (FEAT_INDUSTRYTILES, SELF, oil_wells_tile_1_stop_anim, animation_frame) {
    1: return 11; // jump to the 'stop animation cycle' when triggered and currently animated
    2: return 12;
    3: return 13;
    4: return 14;
    5: return 15;
    6: return 16;
    7: return 17;
    8: return 18;
    9: return 19;
    10: return 20;
    return CB_RESULT_DO_NOTHING;
}

switch (FEAT_INDUSTRYTILES, SELF, oil_wells_tile_1_start_anim, animation_frame) {
    11: return 1;
    12: return 2;
    13: return 3;
    14: return 4;
    15: return 5;
    16: return 6;
    17: return 7;
    18: return 8;
    19: return 9;
    20: return 10;
    return CB_RESULT_START_ANIMATION;
}
random_switch (FEAT_INDUSTRYTILES, SELF, oil_wells_tile_1_random_anim_trigger_switch, bitmask(TRIGGER_INDUSTRYTILE_TILELOOP)) {
    1: return oil_wells_tile_1_stop_anim;
    1: return oil_wells_tile_1_start_anim;
}

switch (FEAT_INDUSTRYTILES, SELF, oil_wells_tile_1_next_frame_switch, animation_frame) {
    10: return 1;
    11: return CB_RESULT_STOP_ANIMATION; // Don't actually stop animation, just keep looping the same frame over and over. // CB_RESULT_STOP_ANIMATION
    20: return 11;
    return CB_RESULT_NEXT_FRAME;
}

switch (FEAT_INDUSTRYTILES, SELF, oil_wells_tile_1_graphics_switch, construction_state) {
    0: oil_wells_tile_construction;
    1: oil_wells_tile(0);
    2: oil_wells_tile(0);
    oil_wells_tile_animation;
}

item(FEAT_INDUSTRYTILES, oil_wells_tile_1) {
    property {
        substitute:         0x1D;
        override:           0x1D;
        animation_info:     [ANIMATION_LOOPING, 20];
        animation_speed:    3;
        animation_triggers: bitmask(ANIM_TRIGGER_INDTILE_TILE_LOOP);
        special_flags:      bitmask(INDTILE_FLAG_RANDOM_ANIMATION);
    }
    graphics {
        anim_control: oil_wells_tile_1_random_anim_trigger_switch;
        anim_next_frame: oil_wells_tile_1_next_frame_switch;
        random_trigger: oil_wells_tile_1_random_anim_trigger_switch;
        oil_wells_tile_1_graphics_switch;
    }
}

spritelayout spritelayout_xmas_tree_1 {
    ground {
        sprite: GROUNDSPRITE_CONCRETE;
    }
    childsprite {
        sprite: spriteset_xmas_tree_1(0);
    }
}

GROUND_AWARE_SPRITELAYOUT(oil_wells_tile(sprite_offset))
    GROUND_SPRITE_OVERLAY(oilwell_ground_overlay)
    CONDITIONAL_BUILDING_SPRITE(2174 + sprite_offset, 32, 1)
SPRITELAYOUT_END

*/

disable_item(FEAT_INDUSTRIES, 0, 0x24);

item(FEAT_INDUSTRIES, candyfloss_forest, 0) {
    property {
        substitute: INDUSTRYTYPE_CANDYFLOSS_FOREST;
        prob_map_gen: 5;
        prob_in_game: 3;
        prod_cargo_types: [CTCD];
    }
}

item(FEAT_INDUSTRIES, sugar_mine, 1) {
    property {
        substitute: INDUSTRYTYPE_SUGAR_MINE;
        prob_in_game: 2;
        prob_map_gen: 4;
        prod_cargo_types: [SUGR];
    }
}

item(FEAT_INDUSTRIES, toffe_quarry, 2) {
    property {
        substitute: INDUSTRYTYPE_TOFFE_QUARRY;
        prob_in_game: 3;
        prob_map_gen: 5;
        prod_cargo_types: [TOFF];
    }
}

item(FEAT_INDUSTRIES, sweets_factory, 3) {
    property {
        substitute: INDUSTRYTYPE_SWEETS_FACTORY;
        prob_in_game: 3;
        prob_map_gen: 5;
        accept_cargo_types: [TOFF, CTCD, SUGR];
        prod_cargo_types: [SWET];
    }
}

item(FEAT_INDUSTRIES, cola_wells, 4) {
    property {
        substitute: INDUSTRYTYPE_COLA_WELLS;
        prob_in_game: 3;
        prob_map_gen: 5;
        prod_cargo_types: [COLA];
    }
}

item(FEAT_INDUSTRIES, bubble_generator, 5) {
    property {
        substitute: INDUSTRYTYPE_BUBBLE_GENERATOR;
        prob_in_game: 3;
        prob_map_gen: 5;
        prod_cargo_types: [BUBL];
    }
}

item(FEAT_INDUSTRIES, fizzy_drinks, 6) {
    property {
        substitute: INDUSTRYTYPE_FIZZY_DRINKS_FACTORY;
        prob_in_game: 3;
        prob_map_gen: 4;
        accept_cargo_types: [COLA, BUBL];
        prod_cargo_types: [FZDR];
    }
}

item(FEAT_INDUSTRIES, plastic_fountain, 7) {
    property {
        substitute: INDUSTRYTYPE_PLASTIC_FOUNTAIN;
        prob_in_game: 3;
        prob_map_gen: 5;
        prod_cargo_types: [PLST];
    }
}

item(FEAT_INDUSTRIES, battery_farm, 8) {
    property {
        substitute: INDUSTRYTYPE_BATTERY_FARM;
        prob_in_game: 3;
        prob_map_gen: 4;
        prod_cargo_types: [BATT];
    }
}

item(FEAT_INDUSTRIES, toy_factory, 9) {
    property {
        substitute: INDUSTRYTYPE_TOY_FACTORY;
        prob_in_game: 3;
        prob_map_gen: 5;
        accept_cargo_types: [PLST, BATT];
        prod_cargo_types: [TOYS];
    }
}

item(FEAT_INDUSTRIES, toy_shop, 10) {
    property {
        substitute: INDUSTRYTYPE_TOY_SHOP;
        prob_in_game: 3;
        prob_map_gen: 4;
        accept_cargo_types: [TOYS];
        spec_flags: 0;
    }
}
